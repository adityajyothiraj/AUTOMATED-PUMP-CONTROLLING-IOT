#include <Arduino.h>
#include <Wire.h>
#include <FirebaseClient.h>
#include "ExampleFunctions.h"
#include <otadrive_esp.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <HTTPClient.h> 

#define led_Off 5
#define led_On 16
#define led_Auto 17
#define button_Off 34
#define button_On 35
#define button_Auto 14
#define relay 18
#define I2C_SDA 32
#define I2C_SCL 33

#define WIFI_SSID "PUMP"
#define WIFI_PASSWORD "Pump*123"

IPAddress local_IP(192, 168, 3, 139);
IPAddress gateway(192, 168, 3, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);

#define API_KEY "AIzaSyBMaU5oFpnm64xA1wJoGN3u2c3LyQtX4oM"
#define USER_EMAIL "adityajyothirajyt@gmail.com"
#define USER_PASSWORD "Firebase123"
#define DATABASE_URL "https://neer-d1234-default-rtdb.firebaseio.com/"

SSL_CLIENT ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client);

UserAuth user_auth(API_KEY, USER_EMAIL, USER_PASSWORD, 3000);
FirebaseApp app;
RealtimeDatabase Database;

LiquidCrystal_I2C lcd(0x27, 16, 2);
String filter(String);

unsigned long lastFirebaseQueryTime = 0;
unsigned long firebaseQueryInterval = 500;

String dataBase = "  ";
int On = 0, Off = 0, Auto = 0;

hw_timer_t * timer = NULL;
volatile bool timerFired = false;

const int debounceDelay = 50;
unsigned long lastDebounceTime_Off = 0;
unsigned long lastDebounceTime_On = 0;
unsigned long lastDebounceTime_Auto = 0;

volatile bool buttonOffPressed = false;
volatile bool buttonOnPressed = false;
volatile bool buttonAutoPressed = false;

bool timerStartedForRelayOff = false;

unsigned long lastInternetCheck = 0;
const unsigned long internetCheckInterval = 10000; 

void IRAM_ATTR handleButtonOff() { buttonOffPressed = true; }
void IRAM_ATTR handleButtonOn() { buttonOnPressed = true; }
void IRAM_ATTR handleButtonAuto() { buttonAutoPressed = true; }

void Connect_WiFi();

void IRAM_ATTR onTimer() {
  timerFired = true;
}

bool hasInternet() {
  HTTPClient http;
  http.setConnectTimeout(3000); 
  http.begin("http://clients3.google.com/generate_204");
  int httpCode = http.GET();
  http.end();
  return (httpCode == 204);
}

void setup() {
  Serial.begin(9600);
  Connect_WiFi();

  pinMode(led_Off, OUTPUT);
  pinMode(led_On, OUTPUT);
  pinMode(led_Auto, OUTPUT);
  pinMode(button_Off, INPUT_PULLUP);
  pinMode(button_On, INPUT_PULLUP);
  pinMode(button_Auto, INPUT_PULLUP);
  pinMode(relay, OUTPUT);

  lcd.init(I2C_SDA, I2C_SCL);
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(4, 0);
  lcd.print("AQUALAYA");
  lcd.setCursor(3, 1);
  lcd.print("SAVE WATER");

  attachInterrupt(digitalPinToInterrupt(button_Off), handleButtonOff, FALLING);
  attachInterrupt(digitalPinToInterrupt(button_On), handleButtonOn, FALLING);
  attachInterrupt(digitalPinToInterrupt(button_Auto), handleButtonAuto, FALLING);

  // Timer config (auto-reload after 8 sec)
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 8000000, true); // 8 sec timer
  timerAlarmDisable(timer);
}

void loop() {
  app.loop(); 

  unsigned long currentMillis = millis();

  // âœ… Periodically check internet connection
  if (currentMillis - lastInternetCheck >= internetCheckInterval) {
    lastInternetCheck = currentMillis;

    if (WiFi.status() != WL_CONNECTED || !hasInternet()) {
      //Serial.println("No internet. Reconnecting WiFi...");
      WiFi.disconnect();
      delay(1000);
      Connect_WiFi(); // Try reconnecting
    } //else {
      //Serial.println("Internet OK");
    //}
  }

  if (currentMillis - lastFirebaseQueryTime >= firebaseQueryInterval) {
    lastFirebaseQueryTime = currentMillis;
    dataBase = filter(Database.get<String>(aClient, "DATABASE"));
  }

  // OFF button
  if (buttonOffPressed && (millis() - lastDebounceTime_Off) > debounceDelay) {
    if (dataBase[1] == '0' || dataBase[1] == '1') {
      dataBase[0] = '1';
    }
    Database.set<String>(aClient, "DATABASE", dataBase);
    lastDebounceTime_Off = millis();
    buttonOffPressed = false;
  }

  // ON button
  if (buttonOnPressed && (millis() - lastDebounceTime_On) > debounceDelay) {
    if (dataBase[1] == '0' || dataBase[1] == '1') {
      dataBase[0] = '2';
    }
    Database.set<String>(aClient, "DATABASE", dataBase);
    lastDebounceTime_On = millis();
    buttonOnPressed = false;
  }

  // AUTO button
  if (buttonAutoPressed && (millis() - lastDebounceTime_Auto) > debounceDelay) {
    if (dataBase[1] == '0') {
      dataBase[1] = '1';
    } else if (dataBase[1] == '1') {
      dataBase[1] = '0';
    }
    Database.set<String>(aClient, "DATABASE", dataBase);
    lastDebounceTime_Auto = millis();
    buttonAutoPressed = false;
  }

  // Timer expired
  if (timerFired) {
    digitalWrite(relay, LOW);  // Turn OFF pump
    timerFired = false;
    timerStartedForRelayOff = false;
    timerAlarmDisable(timer);
  }

  // Pump logic
  if (dataBase[0] == '1') {
    lcd.setCursor(0, 1);
    lcd.print("     PUMP OFF    ");
    digitalWrite(led_On, LOW);
    digitalWrite(led_Off, HIGH);

    if (!timerStartedForRelayOff) {
      timerStartedForRelayOff = true;
      timerFired = false;
      timerAlarmEnable(timer); // Start 8-second timer
    }

  } else if (dataBase[0] == '2') {
    lcd.setCursor(0, 1);
    lcd.print("     PUMP ON     ");
    digitalWrite(led_Off, LOW);
    digitalWrite(led_On, HIGH);
    digitalWrite(relay, HIGH);
    timerStartedForRelayOff = false;
    timerFired = false;
    timerAlarmDisable(timer);
  }

  // Auto LED and LCD status
  if (dataBase[1] == '0' && dataBase[0] == '1') {
    digitalWrite(led_Auto, LOW);
    lcd.setCursor(0, 1);
    lcd.print("     PUMP OFF    ");
  } else if (dataBase[1] == '0' && dataBase[0] == '2') {
    digitalWrite(led_Auto, LOW);
    lcd.setCursor(0, 1);
    lcd.print("     PUMP ON     ");
  } else if (dataBase[1] == '1' && dataBase[0] == '1') {
    digitalWrite(led_Auto, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("  PUMP OFF  AUTO ");
  } else if (dataBase[1] == '1' && dataBase[0] == '2') {
    digitalWrite(led_Auto, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("  PUMP ON   AUTO ");
  }
}

String filter(String msg) {
  msg.replace("[", "");
  msg.replace("]", "");
  msg.replace("\\", "");
  msg.replace("\"", "");
  return msg;
}

void Connect_WiFi() {
  Serial.begin(9600);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    //delay(500);
    //Serial.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    //Serial.println("\nWiFi Connected!");
    //Serial.print("IP Address: ");
    //Serial.println(WiFi.localIP());
  } //else {
    //Serial.println("\nFailed to connect to WiFi!");
  //}

  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);
  set_ssl_client_insecure_and_buffer(ssl_client);

  Serial.println("Initializing app...");
  initializeApp(aClient, app, getAuth(user_auth), 120 * 1000, auth_debug_print);
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);
}
