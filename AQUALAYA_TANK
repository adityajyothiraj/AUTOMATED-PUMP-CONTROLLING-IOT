#include <Arduino.h>
#include <stdlib.h>
#include "time.h"
#include <otadrive_esp.h>
#include <WiFi.h>
#include <FirebaseClient.h>
#include "ExampleFunctions.h"
#include "esp_task_wdt.h" // Watchdog support

#define float_bottom 32
#define float_top 33

#define WIFI_SSID "PUMP"
#define WIFI_PASSWORD "Pump*123"

IPAddress local_IP(192, 168, 3, 137);
IPAddress gateway(192, 168, 3, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);

#define APIKEY "07b74c9d-4f21-4461-ad23-9ea5debd8250"
#define FW_VER "1.0.1"

#define API_KEY "AIzaSyBMaU5oFpnm64xA1wJoGN3u2c3LyQtX4oM"
#define USER_EMAIL "adityajyothirajyt@gmail.com"
#define USER_PASSWORD "Firebase123"
#define DATABASE_URL "https://neer-d1234-default-rtdb.firebaseio.com/"

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 19800;
const int daylightOffset_sec = 0;

SSL_CLIENT ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client);

UserAuth user_auth(API_KEY, USER_EMAIL, USER_PASSWORD, 3000);
FirebaseApp app;
RealtimeDatabase Database;

void Connect_WiFi();
String filter(String);
bool isInternetAvailable();

unsigned long lastFirebaseQueryTime = 0;
unsigned long firebaseQueryInterval = 50;

String dataBase = "  ";
int bottom, top, hour = 0;
char timeHour[3];

void setup() {
  Serial.begin(9600);
  Connect_WiFi();

  pinMode(float_bottom, INPUT_PULLUP);
  pinMode(float_top, INPUT_PULLUP);
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  OTADRIVE.setInfo(APIKEY, FW_VER);

  // Enable watchdog (10s timeout)
  esp_task_wdt_init(10, true);
  esp_task_wdt_add(NULL); // Add current loop task to WDT
}

void loop() {
  esp_task_wdt_reset(); // Feed the watchdog

  // Check for real internet connectivity
  if (!isInternetAvailable()) {
    Serial.println("No internet. Attempting reconnection...");

    WiFi.disconnect();
    delay(1000);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    unsigned long startAttempt = millis();
    while (!isInternetAvailable() && millis() - startAttempt < 10000) {
      delay(500);
      Serial.print(".");
    }

    if (!isInternetAvailable()) {
      Serial.println("Still no internet. Restarting...");
      ESP.restart();
    } else {
      Serial.println("Internet restored.");
    }
  }

  app.loop();

  unsigned long currentMillis = millis();
  if (currentMillis - lastFirebaseQueryTime >= firebaseQueryInterval) {
    lastFirebaseQueryTime = currentMillis;
    dataBase = filter(Database.get<String>(aClient, "DATABASE"));
  }

  bottom = digitalRead(float_bottom);
  top = digitalRead(float_top);

  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }

  strftime(timeHour, 3, "%H", &timeinfo);
  hour = atoi(timeHour);

  if (dataBase[1] == '1') {
    if (bottom == 0 && top == 0 && hour >= 5 && hour <= 23) {
      if (dataBase[0] == '1') {
        dataBase[0] = '2';
      }
      Database.set<String>(aClient, "DATABASE", dataBase);
    }

    if (bottom == 1 && top == 1) {
      if (dataBase[0] == '2') {
        dataBase[0] = '1';
      }
      Database.set<String>(aClient, "DATABASE", dataBase);
    }
  }

  if (dataBase[1] == '0') {
    if (bottom == 1 && top == 1) {
      if (dataBase[0] == '2') {
        dataBase[0] = '1';
      }
      Database.set<String>(aClient, "DATABASE", dataBase);
    }
  }
}

String filter(String msg) {
  msg.replace("[", "");
  msg.replace("]", "");
  msg.replace("\\", "");
  msg.replace("\"", "");
  return msg;
}

void Connect_WiFi() {
  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS)) {
    Serial.println("Failed to configure static IP");
  }
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED) {
    if (OTADRIVE.timeTick(30)) {
      // Optional: OTADRIVE.updateFirmware();
    }
    Serial.print(".");
    delay(300);
  }

  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());

  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);
  set_ssl_client_insecure_and_buffer(ssl_client);

  Serial.println("Initializing app...");
  initializeApp(aClient, app, getAuth(user_auth), 120 * 1000, auth_debug_print);
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);
}

// Checks internet availability (not just Wi-Fi)
bool isInternetAvailable() {
  WiFiClient client;
  const char* host = "www.google.com";
  const int port = 80;

  if (client.connect(host, port)) {
    client.stop();
    return true;
  }
  return false;
}
